#!/usr/bin/env python

# MBUtil: a tool for MBTiles files
# Supports importing, exporting, and more
# 
# (c) Development Seed 2012
# Licensed under BSD

import logging, os, sys
from optparse import OptionParser

from mbutil import mbtiles_to_disk, disk_to_mbtiles

if __name__ == '__main__':

    parser = OptionParser(usage="""usage: %prog [options] input output
    
    Examples:
    
    Export an mbtiles file to a directory of files:
    $ mb-util world.mbtiles tiles # tiles must not already exist
    
    Import a directory of tiles into an mbtiles file:
    $ mb-util tiles world.mbtiles # mbtiles file must not already exist""")
    
    parser.add_option("-d", "--debug", action="store_true", dest="debug",
                      help="Turn on debug logging")
    parser.add_option("-q", "--quiet", action="store_true", dest="quiet",
                      help="turn off all logging")

    parser.add_option('--scheme', dest='scheme',
        help='''Tiling scheme of the tiles. Default is "xyz" (z/x/y),
            other options are "tms" which is also z/x/y
            but uses a flipped y coordinate, zyx which is like xyz but tiles are
            stored z/y/x and "wms" which replicates
            the MapServer WMS TileCache directory structure "z/000/000/x/000/000/y.png.
            zxy is an alias for xyz"''',
        type='choice',
        choices=['wms', 'tms', 'xyz', 'zyx', 'zxy'],
        default='xyz')
        
    parser.add_option('--image_format', dest='format',
        help='''The format of the image tiles, either png, jpg, webp or pbf''',
        choices=['png', 'jpg', 'pbf', 'webp'],
        default='png')

    parser.add_option('--grid_callback', dest='callback',
        help='''Option to control JSONP callback for UTFGrid tiles. If grids are not used as JSONP,
            you can remove callbacks specifying --grid_callback="" ''',
        default='grid')

    parser.add_option('--bbox', dest='bbox',
        help='''bounding box in W,S,E,N format''')

    parser.add_option('--zoom', dest='zoom',
                      help='''Zoom range, minzoom-maxzoom''')

    (options, args) = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if options.debug else
    (logging.ERROR if options.quiet else logging.INFO))

    #validate BBOX
    if options.bbox:
        bbox_values = options.bbox.split(",")
        if len(bbox_values) != 4:
            logging.error("BBOX must have 4 values")
            sys.exit(-1)
        bbox = [float(f) for f in bbox_values]
        if abs(bbox[0]) > 180 or abs(bbox[2]) > 180:
            logging.error("Longitude out of range")
            sys.exit(-1)
        if abs(bbox[1]) > 85 or abs(bbox[3]) > 85:
            logging.error("Latitude out of range")
            sys.exit(-1)
        if bbox[0] > bbox[2]:
            logging.error("West component of BBOX is greater than East component. BBOXes that cross the antimeridian are not currently supported.")
            sys.exit(-1)
        if bbox[1] > bbox[3]:
            logging.error("South component of BBOX is greater than North component. This is an error.")
            sys.exit(-1)
        options.bbox = bbox

    if options.scheme == 'zxy':
        options.scheme = 'xyz'
        
    if options.zoom:
        zoom_values = options.zoom.split("-")
        zoom_values = [int(f) for f in zoom_values]
        zoom_range = range(zoom_values[0], zoom_values[1] + 1)
        options.zoom_range = zoom_range

    # Transfer operations
    if len(args) != 2:
        parser.print_help()
        sys.exit(1)

    if os.path.isfile(args[0]) and os.path.exists(args[1]):
        sys.stderr.write('To export MBTiles to disk, specify a directory that does not yet exist\n')
        sys.exit(1)
    
    # to disk
    if os.path.isfile(args[0]) and not os.path.exists(args[1]):
        mbtiles_file, directory_path = args
        mbtiles_to_disk(mbtiles_file, directory_path, **options.__dict__)
    
    if os.path.isdir(args[0]) and os.path.isfile(args[1]):
        sys.stderr.write('Importing tiles into already-existing MBTiles is not yet supported\n')
        sys.exit(1)
    
    # to mbtiles
    if os.path.isdir(args[0]) and not os.path.isfile(args[0]):
        directory_path, mbtiles_file = args
        disk_to_mbtiles(directory_path, mbtiles_file, **options.__dict__)
